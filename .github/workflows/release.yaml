name: ðŸš€ Release
on:
  workflow_dispatch:

env:
  GO_VERSION: 1.23
  BUN_VERSION: 1.1.30
  PROJECT_NAME: jxscout

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "VERSION=$(grep 'const Version =' pkg/constants/version.go | awk '{print $4}' | tr -d '"')" >> $GITHUB_OUTPUT

  build-linux:
    name: Build Linux
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Install libc headers (for cgo)
        run: sudo apt-get update && sudo apt-get install -y build-essential gcc-multilib

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for Linux
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_linux_amd64/jxscout cmd/jxscout/main.go
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -o dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_linux_arm64/jxscout cmd/jxscout/main.go
          CGO_ENABLED=0 GOOS=linux GOARCH=386 go build -o dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_linux_386/jxscout cmd/jxscout/main.go

      - name: Create ZIP archives
        run: |
          cd dist
          for dir in ${{ env.PROJECT_NAME }}_*; do
            zip -r "${dir}.zip" "$dir"
            rm -rf "$dir"
          done

      - name: Generate checksums
        run: |
          cd dist
          sha256sum ${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_linux_*.zip > ${{ env.PROJECT_NAME }}-linux-checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: dist/

  build-macos:
    name: Build macOS
    needs: prepare
    runs-on: macos-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for macOS
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -o dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_macOS_amd64/jxscout cmd/jxscout/main.go
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_macOS_arm64/jxscout cmd/jxscout/main.go

      - name: Create ZIP archives
        run: |
          cd dist
          for dir in ${{ env.PROJECT_NAME }}_*; do
            zip -r "${dir}.zip" "$dir"
            rm -rf "$dir"
          done

      - name: Generate checksums
        run: |
          cd dist
          sha256sum ${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_macOS_*.zip > ${{ env.PROJECT_NAME }}-mac-checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: dist/

  build-windows:
    name: Build Windows
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for Windows
        run: |
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -o dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_windows_amd64/jxscout.exe cmd/jxscout/main.go

      - name: Create ZIP archives
        run: |
          cd dist
          for dir in ${{ env.PROJECT_NAME }}_*; do
            Compress-Archive -Path "$dir" -DestinationPath "${dir}.zip"
            Remove-Item -Recurse -Force "$dir"
          done

      - name: Generate checksums
        run: |
          cd dist
          Get-FileHash -Algorithm SHA256 ${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_windows_*.zip | Format-Table -HideTableHeaders | Out-File -Encoding utf8 ${{ env.PROJECT_NAME }}-windows-checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: dist/

  release:
    name: Create Release
    needs: [prepare, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create source archives
        run: |
          git archive --format=zip --output=dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_source.zip HEAD
          git archive --format=tar.gz --output=dist/${{ env.PROJECT_NAME }}_${{ needs.prepare.outputs.version }}_source.tar.gz HEAD

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
